const axios = require('axios');

/**
 * –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
 * –¶–µ–ª—å: –ø–æ–ª—É—á–∞—Ç—å ~$2 —Å –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ —É—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Å
 */
class FeeCalculator {
    constructor() {
        // –í–∞—à –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π
        this.platformWallet = 'UQAFlXXrd9zkbyNxbi_vIPIXZpKnAUY83hrcZ6lVX0iRmavn';
        
        // –ö–µ—à –∫—É—Ä—Å–∞ TON/USD
        this.tonPriceUSD = null;
        this.lastPriceUpdate = null;
        this.priceUpdateInterval = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        // –¶–µ–ª–µ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ USD
        this.targetFeeUSD = 2.0; // $2
        
        // –†–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –¥–µ–ø–ª–æ–π –≤ TON
        this.costs = {
            deployMinter: 0.04,      // –î–µ–ø–ª–æ–π Minter –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            mintInitial: 0.13,       // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –º–∏–Ω—Ç
            gasBuffer: 0.03,         // –ë—É—Ñ–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            networkFees: 0.02        // –°–µ—Ç–µ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
        };
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ TON (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏—Ö —Ü–µ–Ω)
        this.minFeeTON = 0.5;
        
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –≤ TON (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏—Ö —Ü–µ–Ω)
        this.maxFeeTON = 10;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å TON/USD
     */
    async fetchTONPrice() {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ 1: CoinGecko API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            try {
                const response = await axios.get(
                    'https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=usd',
                    { timeout: 5000 }
                );
                if (response.data && response.data['the-open-network']) {
                    return response.data['the-open-network'].usd;
                }
            } catch (e) {
                console.warn('CoinGecko API failed, trying alternative...');
            }

            // –ü–æ–ø—ã—Ç–∫–∞ 2: CoinMarketCap (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
            try {
                const response = await axios.get(
                    'https://api.coinmarketcap.com/data-api/v3/cryptocurrency/market-pairs/latest?slug=toncoin&start=1&limit=1',
                    { timeout: 5000 }
                );
                if (response.data && response.data.data) {
                    const price = response.data.data.marketPairs?.[0]?.price;
                    if (price) return parseFloat(price);
                }
            } catch (e) {
                console.warn('CoinMarketCap API failed, trying alternative...');
            }

            // –ü–æ–ø—ã—Ç–∫–∞ 3: TON API
            try {
                const response = await axios.get(
                    'https://tonapi.io/v2/rates?tokens=ton&currencies=usd',
                    { timeout: 5000 }
                );
                if (response.data && response.data.rates) {
                    return response.data.rates.TON?.prices?.USD;
                }
            } catch (e) {
                console.warn('TON API failed');
            }

            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
            console.warn('All price APIs failed, using fallback');
            return this.tonPriceUSD || 5.5; // –î–µ—Ñ–æ–ª—Ç ~$5.5

        } catch (error) {
            console.error('Error fetching TON price:', error.message);
            return this.tonPriceUSD || 5.5;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É TON –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    async updateTONPrice() {
        const now = Date.now();
        
        if (!this.lastPriceUpdate || (now - this.lastPriceUpdate) > this.priceUpdateInterval) {
            console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ TON/USD...');
            this.tonPriceUSD = await this.fetchTONPrice();
            this.lastPriceUpdate = now;
            console.log(`‚úÖ –ö—É—Ä—Å TON: $${this.tonPriceUSD.toFixed(2)}`);
        }
        
        return this.tonPriceUSD;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ TON
     */
    calculateTotalCosts() {
        const total = Object.values(this.costs).reduce((sum, cost) => sum + cost, 0);
        return total;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ TON
     */
    async calculatePlatformFee() {
        await this.updateTONPrice();
        
        // –ö–æ–º–∏—Å—Å–∏—è = —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –≤ USD / –∫—É—Ä—Å TON
        let feeInTON = this.targetFeeUSD / this.tonPriceUSD;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if (feeInTON < this.minFeeTON) {
            console.warn(`‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è ${feeInTON.toFixed(4)} TON —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∏–Ω–∏–º—É–º ${this.minFeeTON} TON`);
            feeInTON = this.minFeeTON;
        }
        
        if (feeInTON > this.maxFeeTON) {
            console.warn(`‚ö†Ô∏è –ö–æ–º–∏—Å—Å–∏—è ${feeInTON.toFixed(4)} TON —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º ${this.maxFeeTON} TON`);
            feeInTON = this.maxFeeTON;
        }
        
        return feeInTON;
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async calculateTokenCreationFee() {
        const costs = this.calculateTotalCosts();
        const platformFee = await this.calculatePlatformFee();
        const totalFee = costs + platformFee;
        
        const breakdown = {
            // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
            costs: {
                deployMinter: this.costs.deployMinter,
                mintInitial: this.costs.mintInitial,
                gasBuffer: this.costs.gasBuffer,
                networkFees: this.costs.networkFees,
                total: costs
            },
            
            // –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platformFee: platformFee,
            platformFeeUSD: platformFee * this.tonPriceUSD,
            
            // –ò—Ç–æ–≥–æ
            totalFee: totalFee,
            totalFeeUSD: totalFee * this.tonPriceUSD,
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            tonPriceUSD: this.tonPriceUSD,
            platformWallet: this.platformWallet,
            timestamp: new Date().toISOString()
        };
        
        console.log('üí∞ –†–∞—Å—á—ë—Ç –∫–æ–º–∏—Å—Å–∏–∏:');
        console.log(`   –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –¥–µ–ø–ª–æ–π: ${costs.toFixed(4)} TON ($${(costs * this.tonPriceUSD).toFixed(2)})`);
        console.log(`   –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${platformFee.toFixed(4)} TON ($${breakdown.platformFeeUSD.toFixed(2)})`);
        console.log(`   –ò–¢–û–ì–û: ${totalFee.toFixed(4)} TON ($${breakdown.totalFeeUSD.toFixed(2)})`);
        
        return breakdown;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
     */
    async createPaymentTransactions(userAddress) {
        const feeData = await this.calculateTokenCreationFee();
        
        // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 1: –û–ø–ª–∞—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª—ë–∫
        const platformPayment = {
            to: this.platformWallet,
            amount: Math.ceil(feeData.platformFee * 1e9).toString(), // –í nanoTON
            payload: this.createPaymentPayload('Platform fee for token creation')
        };
        
        // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è 2: –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã)
        const deployPayment = {
            amount: Math.ceil(feeData.costs.total * 1e9).toString(),
            description: 'Token deployment costs'
        };
        
        return {
            feeBreakdown: feeData,
            transactions: [
                {
                    type: 'platform_fee',
                    ...platformPayment,
                    description: `–ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: $${feeData.platformFeeUSD.toFixed(2)}`
                }
            ],
            deployCosts: deployPayment,
            totalRequired: feeData.totalFee
        };
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç payload –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    createPaymentPayload(comment) {
        // –°–æ–∑–¥–∞—ë–º text comment –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const commentBuffer = Buffer.from(comment, 'utf8');
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∫–æ–¥ 0 –¥–ª—è text comment
        const payload = Buffer.concat([
            Buffer.from([0, 0, 0, 0]), // opcode 0
            commentBuffer
        ]);
        return payload.toString('base64');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ (–†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê)
     */
    async verifyPayment(txHash, expectedAmount) {
        try {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${txHash}`);
            console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: ${expectedAmount} nanoTON (${(expectedAmount / 1e9).toFixed(4)} TON)`);
            
            // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ TON API (tonapi.io)
            try {
                const response = await axios.get(
                    `https://tonapi.io/v2/blockchain/transactions/${txHash}`,
                    { timeout: 10000 }
                );
                
                if (response.data && response.data.out_msgs) {
                    const payment = response.data.out_msgs.find(msg => 
                        msg.destination?.address === this.platformWallet &&
                        parseInt(msg.value) >= expectedAmount
                    );
                    
                    if (payment) {
                        console.log(`‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: ${(parseInt(payment.value) / 1e9).toFixed(4)} TON`);
                        return true;
                    }
                }
            } catch (apiError) {
                console.warn('TON API check failed, trying alternative method...');
            }

            // –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ toncenter.com
            try {
                const response = await axios.get(
                    `https://toncenter.com/api/v2/getTransactions?address=${this.platformWallet}&limit=10`,
                    { timeout: 10000 }
                );
                
                if (response.data && response.data.result) {
                    // –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10
                    const recentTx = response.data.result.find(tx => {
                        if (!tx.in_msg) return false;
                        const value = parseInt(tx.in_msg.value || 0);
                        return value >= expectedAmount;
                    });
                    
                    if (recentTx) {
                        console.log(`‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—à–µ–ª—å–∫–∞`);
                        return true;
                    }
                }
            } catch (centerError) {
                console.warn('TonCenter API check failed');
            }

            // –ï—Å–ª–∏ hash –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'mock_' - —ç—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º
            if (txHash.startsWith('mock_')) {
                console.log(`‚úÖ –î–µ–º–æ-—Ä–µ–∂–∏–º: –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞`);
                return true;
            }
            
            console.warn(`‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è ${txHash}`);
            return false;
            
        } catch (error) {
            console.error('Payment verification error:', error);
            // –í production –≤–µ—Ä–Ω–∏—Ç–µ false
            // –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
            return txHash.startsWith('mock_');
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º –∫–æ–º–∏—Å—Å–∏—è–º
     */
    async getRevenueStats() {
        // –í production: –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        // –∏ –ø–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏
        
        return {
            platformWallet: this.platformWallet,
            totalTokensCreated: 0, // –ò–∑ –ë–î
            totalRevenueTO: 0,     // –°—É–º–º–∞ –≤—Å–µ—Ö platformFee
            totalRevenueUSD: 0,
            averageFeeUSD: 0,
            lastUpdate: new Date().toISOString()
        };
    }
}

// Singleton instance
const feeCalculator = new FeeCalculator();

module.exports = { FeeCalculator, feeCalculator };

