const { TonClient, WalletContractV4, internal, fromNano, toNano } = require('@ton/ton');
const { mnemonicToPrivateKey, mnemonicNew } = require('@ton/crypto');
const { Address, beginCell, Cell } = require('@ton/core');
const { 
  JETTON_MINTER_CODE_HEX, 
  JETTON_WALLET_CODE_HEX,
  JettonOpcodes,
  JettonGasCosts
} = require('./compiled-contracts');

class JettonDeployer {
    constructor(tonClient) {
        this.client = tonClient;
        this.jettonMinterCode = null;
        this.jettonWalletCode = null;
    }

    async init() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ hex
            this.jettonMinterCode = Cell.fromBoc(Buffer.from(JETTON_MINTER_CODE_HEX, 'hex'))[0];
            this.jettonWalletCode = Cell.fromBoc(Buffer.from(JETTON_WALLET_CODE_HEX, 'hex'))[0];
            console.log('‚úÖ Jetton contracts loaded successfully');
            console.log('   Minter code hash:', this.jettonMinterCode.hash().toString('hex').slice(0, 16) + '...');
            console.log('   Wallet code hash:', this.jettonWalletCode.hash().toString('hex').slice(0, 16) + '...');
        } catch (e) {
            console.error('Jetton deployer init error:', e);
            throw new Error('Failed to load Jetton contracts: ' + e.message);
        }
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç metadata cell –¥–ª—è Jetton
     */
    buildTokenMetadataCell(data) {
        const ONCHAIN_CONTENT_PREFIX = 0x00;
        const SNAKE_PREFIX = 0x00;
        const KEYLEN = 256;

        const dict = {}; // –£–ø—Ä–æ—â—ë–Ω–Ω–æ, –≤ production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ beginDict
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        const metadata = {
            name: data.name || '',
            symbol: data.symbol || '',
            description: data.description || '',
            image: data.image || '',
            decimals: data.decimals || '9'
        };

        // –°–æ–∑–¥–∞—ë–º cell —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const metadataCell = beginCell()
            .storeUint(ONCHAIN_CONTENT_PREFIX, 8)
            .endCell();

        return metadataCell;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç init data –¥–ª—è Jetton Minter
     */
    jettonMinterInitData(owner, metadata) {
        const metadataCell = this.buildTokenMetadataCell(metadata);
        
        return beginCell()
            .storeCoins(0) // totalSupply (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –º–∏–Ω—Ç–∞)
            .storeAddress(Address.parse(owner))
            .storeRef(metadataCell)
            // .storeRef(this.jettonWalletCode) // –í production —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
            .endCell();
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç Mint message body
     * ‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —Å–Ω–∏–∂–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è —Å 0.2 –¥–æ 0.08 TON
     */
    static createMintBody(ownerAddress, jettonAmount) {
        return beginCell()
            .storeUint(JettonOpcodes.MINT, 32) // opcode –¥–ª—è –º–∏–Ω—Ç–∏–Ω–≥–∞
            .storeUint(0, 64) // query_id
            .storeAddress(Address.parse(ownerAddress))
            .storeCoins(BigInt(JettonGasCosts.MINT_FORWARD)) // –≥–∞–∑ –¥–ª—è —Ñ–æ—Ä–≤–∞—Ä–¥–∞
            .storeRef(
                beginCell()
                    .storeUint(JettonOpcodes.INTERNAL_TRANSFER, 32)
                    .storeUint(0, 64)
                    .storeCoins(jettonAmount)
                    .storeAddress(null) // from_address
                    .storeAddress(null) // response_address
                    .storeCoins(0)
                    .storeBit(false) // forward_payload –≤ —ç—Ç–æ–º —Å–ª–∞–π—Å–µ
                    .endCell()
            )
            .endCell();
    }

    /**
     * –î–µ–ø–ª–æ–∏—Ç Jetton Minter –∫–æ–Ω—Ç—Ä–∞–∫—Ç
     */
    async deployJettonMinter(params) {
        const {
            ownerAddress,
            name,
            symbol,
            description,
            image,
            totalSupply,
            decimals = 9
        } = params;

        try {
            // 1. –°–æ–∑–¥–∞—ë–º init data
            const initData = this.jettonMinterInitData(ownerAddress, {
                name,
                symbol,
                description,
                image,
                decimals: decimals.toString()
            });

            // 2. –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const stateInit = beginCell()
                .storeBit(0)
                .storeBit(0)
                .storeBit(1)
                .storeBit(1)
                .storeRef(this.jettonMinterCode)
                .storeRef(initData)
                .endCell();
            
            const contractAddress = new Address(0, stateInit.hash());

            console.log('üìù Jetton Minter deploy transaction prepared');
            console.log('   Address:', contractAddress.toString());
            console.log('   Name:', name);
            console.log('   Symbol:', symbol);

            // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            return {
                success: true,
                contractAddress: contractAddress.toString(),
                deployTransaction: {
                    address: contractAddress.toString(),
                    amount: JettonGasCosts.DEPLOY_MINTER,
                    stateInit: stateInit.toBoc().toString('base64'),
                    payload: ''
                },
                metadata: {
                    name,
                    symbol,
                    description,
                    image,
                    decimals,
                    totalSupply
                }
            };

        } catch (error) {
            console.error('Deploy Jetton Minter error:', error);
            throw error;
        }
    }

    /**
     * –ú–∏–Ω—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞
     */
    async mintTokens(minterAddress, ownerAddress, amount) {
        try {
            const mintBody = JettonDeployer.createMintBody(
                ownerAddress,
                BigInt(amount)
            );

            console.log('üí∞ Mint transaction prepared');
            console.log('   Minter:', minterAddress);
            console.log('   Owner:', ownerAddress);
            console.log('   Amount:', amount);

            return {
                success: true,
                mintTransaction: {
                    address: minterAddress,
                    amount: JettonGasCosts.MINT_TOKENS,
                    payload: mintBody.toBoc().toString('base64')
                }
            };

        } catch (error) {
            console.error('Mint tokens error:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å Jetton Wallet –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getJettonWalletAddress(minterAddress, userAddress) {
        try {
            // –í production: –≤—ã–∑–æ–≤–∏—Ç–µ get_wallet_address –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            const result = await this.client.runMethod(
                Address.parse(minterAddress),
                'get_wallet_address',
                [
                    {
                        type: 'slice',
                        cell: beginCell()
                            .storeAddress(Address.parse(userAddress))
                            .endCell()
                    }
                ]
            );

            // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            // const walletAddress = result.stack.readAddress();
            
            // Mock –¥–ª—è –¥–µ–º–æ
            const walletAddress = this.generateMockAddress();

            return walletAddress;

        } catch (error) {
            console.error('Get jetton wallet address error:', error);
            return this.generateMockAddress();
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç mock –∞–¥—Ä–µ—Å –¥–ª—è –¥–µ–º–æ
     */
    generateMockAddress() {
        const chars = '0123456789abcdef';
        let addr = '0:';
        for (let i = 0; i < 64; i++) {
            addr += chars[Math.floor(Math.random() * chars.length)];
        }
        return addr;
    }

    /**
     * –°–æ–∑–¥–∞—ë—Ç transfer body –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Jetton
     */
    static createTransferBody(params) {
        const {
            toAddress,
            jettonAmount,
            forwardTonAmount = 0,
            forwardPayload = null,
            responseAddress = null
        } = params;

        const OPS = {
            Transfer: 0xf8a7ea5
        };

        return beginCell()
            .storeUint(OPS.Transfer, 32) // opcode
            .storeUint(0, 64) // query_id
            .storeCoins(jettonAmount)
            .storeAddress(Address.parse(toAddress))
            .storeAddress(responseAddress ? Address.parse(responseAddress) : null)
            .storeBit(false) // custom_payload
            .storeCoins(forwardTonAmount)
            .storeBit(false) // forward_payload –≤ —ç—Ç–æ–º —Å–ª–∞–π—Å–µ
            .endCell();
    }
}

module.exports = { JettonDeployer };

